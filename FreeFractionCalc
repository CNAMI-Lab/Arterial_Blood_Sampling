import os
import pandas as pd
import numpy as np
import statistics
import xlrd
import matplotlib.pyplot as plt
from openpyxl.drawing.image import Image


class FreeFraction:
    def __init__(self, halflife, bkg, tubes, tube_results, sample_values, sample_positions, final_results,
                 file_path):

        self.halflife = halflife
        self.bkg = bkg
        self.tubes = tubes
        self.tube_results = tube_results
        self.sample_positions = sample_positions
        self.file_path = '20221019_18FASEM.xlsx'
        self.sample_values = self.parse_values(file_path, sample_positions)
        self.final_results = final_results

    def parse_values(self, file_path, sample_positions):  # WORKS
        file_path = '20221019_18FASEM.xlsx'

        df = pd.read_excel(file_path, skiprows=20)

        sample_values = {}

        for tube, positions in sample_positions.items():
            print(f"Tube: {tube}")
            tube_sample_values = {}
            for position in positions:
                print(f"Position: {position}")
                current_row = df[(df['POS'] == position) & (df['CH'] == 1)]
                next_row_empty = df['POS'].shift(-1).loc[current_row.index].isna().item()

                cpm1 = current_row['CPM'].values[0] if not current_row.empty else None
                eltime = current_row['ELTIME  '].values[0] if not current_row.empty else None

                if next_row_empty:
                    next_row_cpm2 = df['CPM'].shift(-1).loc[current_row.index].dropna()
                    if not next_row_cpm2.empty:
                        cpm2 = next_row_cpm2.values[0]

                tube_sample_values[position] = {
                    'CPM1': cpm1,
                    'CPM2': cpm2,
                    'ELTIME': eltime
                }

            sample_values[tube] = tube_sample_values

        return sample_values

        sample_values = parse_values(file_path, sample_positions)

    def columnf_calc(self):  
        tube_results = {}
        file_path = file_path
        sample_positions = sample_positions
        parsed_values = parse_values(file_path, sample_positions)
        self.halflife = halflife
        self.bkg = 28

        for tube, tube_sample_values in parsed_values.items():
            tube_results[tube] = {}
            for position, values in tube_sample_values.items():  # this is probably the issue
                cpm1 = values['CPM1']
                cpm2 = values['CPM2']
                eltime = values['ELTIME']

                calculation = (cpm1 + cpm2 - self.bkg) * 2 ** eltime / self.halflife  # calc is off
                tube_results[tube][position] = calculation

        return tube_results

    def ff_calc(self):
        final_results = {}

        for tube, positions in sample_positions.items():
            tube_results = columnf_calc()[tube]

            calculation_values = []
            for position in positions:
                if position in tube_results:
                    calculation_values.append(tube_results[position])
                else:
                    calculation_values.append(0)  # If position is missing, assume value of 0

            c_aliquot, c_remainder, c_top = calculation_values
            print("Tube:", tube, "Aliquot:", c_aliquot, "Remainder:", c_remainder, "Top:", c_top)

            if tube == list(sample_positions.keys())[0]:
                final_calculation = result = (c_aliquot / 0.15) / ((c_aliquot + c_remainder + c_top) / 0.5)

            else:
                final_calculation = result = (c_aliquot / 0.15) / ((c_aliquot + c_remainder + c_top) / 0.4)

            final_results[tube] = final_calculation

        return final_results

        final_results = ff_calc()

    def stats(self):
        final_results = ff_calc()
        results_values = list(final_results.values())[:4]
        saline = list(final_results.values())[-2:]

        average = statistics.mean(results_values)
        std_dev = statistics.stdev(results_values)
        saline_average = statistics.mean(saline)
        saline_std = statistics.stdev(saline)

        print("Average:", average, "Standard Deviation:", std_dev, "Saline Average: ", saline_average, "Saline StDev: ",
              saline_std)

        return average, std_dev, saline_average, saline_std

    def create_boxplot(self):
        final_results_1 = {
            'A': 0.049870728512930146,
            'B': 0.04213991024940731,
            'C': 0.049001855069462516,
            'D': 0.0453538823156846,
            'E': 0.8378413782929937,
            'F': 0.8754842529450337
        }  # ASEM

        final_results_2 = {
            'A': 0.3357582116707509,
            'B': 0.28148167731241813,
            'C': 0.29550856039431306,
            'D': 0.3099990954690565,
            'E': 0.8778051288501841,
            'F': 0.8837126248542743
        }  # MDL for comparison

        # Calculate averages and standard deviations for the first set of data
        results_values_1 = list(final_results_1.values())
        averages_plasma_1 = statistics.mean(results_values_1[:4])
        std_dev_plasma_1 = statistics.stdev(results_values_1[:4])
        averages_controls_1 = statistics.mean(results_values_1[-2:])
        std_dev_controls_1 = statistics.stdev(results_values_1[-2:])

        # Calculate averages and standard deviations for the second set of data
        results_values_2 = list(final_results_2.values())
        averages_plasma_2 = statistics.mean(results_values_2[:4])
        std_dev_plasma_2 = statistics.stdev(results_values_2[:4])
        averages_controls_2 = statistics.mean(results_values_2[-2:])
        std_dev_controls_2 = statistics.stdev(results_values_2[-2:])

        data_1 = {
            'Tubes': list(final_results_1.keys()),
            'Values': results_values_1,
        }
        df_1 = pd.DataFrame(data_1)

        data_2 = {
            'Tubes': list(final_results_2.keys()),
            'Values': results_values_2,
        }
        df_2 = pd.DataFrame(data_2)

        excel_filename = 'final_results.xlsx'
        with pd.ExcelWriter(excel_filename, engine='openpyxl') as writer:
            df_1.to_excel(writer, index=False, sheet_name='FF_20221019_18FASEM')
            df_2.to_excel(writer, index=False, sheet_name='FF_MDL')

            # Create the scatter plot for the first set of data
            fig, (ax1, ax2) = plt.subplots(2, figsize=(8, 12))

            ax1.scatter(data_1['Tubes'], data_1['Values'], s=50)
            ax1.set_xlabel('Tube Labels', fontsize=14)
            ax1.set_xticklabels(data_1['Tubes'])
            ax1.set_ylabel('Free Fraction', fontsize=14)
            ax1.set_title('Free Fraction - FF_20221019_18FASEM', fontsize=16)

            ax1.text(4, 0.85, 'Controls', ha='center')
            ax1.text(0, 0.2, 'Plasma', ha='center')
            ax1.text(1, 0.2, 'Plasma', ha='center')
            ax1.text(2, 0.2, 'Plasma', ha='center')
            ax1.text(3, 0.2, 'Plasma', ha='center')

            ax1.errorbar(range(len(data_1['Tubes']) - 2), data_1['Values'][:-2], yerr=std_dev_plasma_1, fmt='none',
                         ecolor='red', capsize=3, label='Plasma')
            ax1.errorbar(range(len(data_1['Tubes']) - 2, len(data_1['Tubes'])), data_1['Values'][-2:],
                         yerr=std_dev_controls_1, fmt='none', ecolor='red', capsize=3, label='Controls')

            ax1.legend()

            # Create the scatter plot for the second set of data
            ax2.scatter(data_2['Tubes'], data_2['Values'], s=50)
            ax2.set_xlabel('Tube Labels', fontsize=14)
            ax2.set_xticklabels(data_2['Tubes'])
            ax2.set_ylabel('Free Fraction', fontsize=14)
            ax2.set_title('Free Fraction - FF_MDL', fontsize=16)

            ax2.text(0, data_2['Values'][0] + 0.03, 'Plasma', ha='center')
            ax2.text(1, data_2['Values'][1] + 0.03, 'Plasma', ha='center')
            ax2.text(2, data_2['Values'][2] + 0.03, 'Plasma', ha='center')
            ax2.text(3, data_2['Values'][3] + 0.03, 'Plasma', ha='center')

            ax2.errorbar(range(len(data_2['Tubes']) - 2), data_2['Values'][:-2], yerr=std_dev_plasma_2, fmt='none',
                         ecolor='green', capsize=3, label='Plasma')
            ax2.errorbar(range(len(data_2['Tubes']) - 2, len(data_2['Tubes'])), data_2['Values'][-2:],
                         yerr=std_dev_controls_2, fmt='none', ecolor='orange', capsize=3, label='Controls')

            ax2.legend()

            scatter_plot_filename = 'scatter_plots.png'
            plt.savefig(scatter_plot_filename)

            scatter_plot_image = Image(scatter_plot_filename)
            workbook = writer.book
            worksheet_1 = writer.sheets['FF_20221019_18FASEM']
            worksheet_2 = writer.sheets['FF_MDL']
            worksheet_1.add_image(scatter_plot_image, 'F5')
            worksheet_2.add_image(scatter_plot_image, 'F5')

        plt.show()

    # #instance variables for MDL
    # halflife = 20.34
    # bkg = 28
    # tubes = ['A', 'B', 'C', 'D', 'E', 'F']
    # sample_values = sample_values
    # tube_results = tube_results
    # sample_positions = {
    #     'A': [14, 15, 16],
    #     'B': [18, 19, 20],
    #     'C': [22, 23, 24],
    #     'D': [26, 27, 28],
    #     'E': [30, 31, 32],
    #     'F': [34, 35, 36]
    # }
    # final_results = final_results
    # file_path = 'FF Calculator 2022 v2 EJ.xls'

    # instance variables for 20221019_18FASEM

    def run_ff_calculation(self):
        # Instance variables
        halflife = 109.7
        bkg = 28
        tubes = ['A', 'B', 'C', 'D', 'E', 'F']
        sample_values = None
        tube_results = None
        sample_positions = {
            'A': [109, 110, 111],
            'B': [113, 114, 115],
            'C': [117, 118, 119],
            'D': [121, 122, 123],
            'E': [125, 126, 127],
            'F': [129, 130, 131]
        }
        file_path = '20221019_18FASEM.xlsx'
        final_results = None

        ff = FreeFraction(halflife, bkg, tubes, tube_results, sample_positions, final_results, file_path)

        ff.parse_values(file_path, sample_positions)
        ff.columnf_calc()
        ff.ff_calc()
        ff.stats()
        ff.create_boxplot()

        ff.run_ff_calculation()
        
    

