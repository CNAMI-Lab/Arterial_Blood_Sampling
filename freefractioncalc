import os
import pandas as pd
import statistics


class FreeFraction:
    def __init__(self, halflife, bkg, sample_positions):
        self.halflife = halflife
        self.bkg = bkg
        self.tubes = ['A', 'B', 'C', 'D', 'E', 'F']
        self.samples = ['aliquot', 'remainder', 'top']
        self.sample_positions = sample_positions

    def parse_values(self, file_path):
        df = pd.read_excel(file_path, skiprows=20)

        sample_values = {}

        for tube in self.tubes:
            tube_sample_values = {}
            for sample in self.samples:
                position = self.sample_positions[self.tubes.index(tube)]
                filtered_df = df[(df['POS'] == position) & (df['CH'].isin([1, 2]))]

                cpm1 = filtered_df.loc[filtered_df['CH'] == 1, 'CPM'].values[0]
                cpm2 = filtered_df.loc[filtered_df['CH'] == 2, 'CPM'].values[0]
                eltime = filtered_df['ELTIME'].values[0]

                tube_sample_values[sample] = {
                    'CPM1': cpm1,
                    'CPM2': cpm2,
                    'ELTIME': eltime
                }

            sample_values[tube] = tube_sample_values

        return sample_values

    def columnf_calc(self, sample_values, tube):
        tube_sample_values = sample_values[tube]
        tube_results = []

        for sample in self.samples:
            cpm1 = tube_sample_values[sample]['CPM1']
            cpm2 = tube_sample_values[sample]['CPM2']
            eltime = tube_sample_values[sample]['ELTIME']

            calculation = (cpm1 + cpm2 - self.bkg) * 2 ** eltime / self.halflife
            tube_results.append(calculation)

        return tube_results

    def ff_calc(self, sample_values):
        final_results = {}

        for tube in self.tubes:
            tube_results = self.columnf_calc(sample_values, tube)

            if tube == self.tubes[0]:
                final_calculation = (tube_results[0] / 0.15) / (sum(tube_results) / 0.5)
            else:
                final_calculation = (tube_results[0] / 0.15) / (sum(tube_results) / 0.4)

            final_results[tube] = final_calculation

        return final_results

    def calculate_average_std(self, final_results):
        # Extract the values from the final_results dictionary
        results_values = list(final_results.values())

        average = statistics.mean(results_values)

        std_dev = statistics.stdev(results_values)

        return average, std_dev

